import streamlit as st
from collections import Counter

# –ê—Ä—Ö–µ—Ç–∏–ø–∏—á–µ—Å–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —á–∏—Å–µ–ª
ARCHETYPES = {
    1: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –í–æ–∏–Ω–∞ / –õ–∏–¥–µ—Ä–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–í–æ–ø–ª–æ—â–µ–Ω–∏–µ —Å–∏–ª—ã –≤–æ–ª–∏, –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
        "—Å–≤–µ—Ç": "–ù–æ–≤–∞—Ç–æ—Ä, –ª–∏–¥–µ—Ä, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –≤ —Å–µ–±–µ",
        "—Ç–µ–Ω—å": "–£–ø—Ä—è–º—Å—Ç–≤–æ, —ç–≥–æ–∏–∑–º, —Å—Ç—Ä–∞—Ö –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞",
        "–∑–∞–¥–∞—á–∞": "–ò–¥–∏ —Å–≤–æ–∏–º –ø—É—Ç—ë–º, –Ω–µ –±–æ–π—Å—è –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π"
    },
    2: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –î–∏–ø–ª–æ–º–∞—Ç–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ –∏ –∏–Ω—Ç—É–∏—Ü–∏–∏",
        "—Å–≤–µ—Ç": "–≠–º–ø–∞—Ç–∏—è, —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ, –º—è–≥–∫–æ—Å—Ç—å",
        "—Ç–µ–Ω—å": "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å, –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞",
        "–∑–∞–¥–∞—á–∞": "–£—á–∏—Å—å –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –∂–µ–ª–∞–Ω–∏—è"
    },
    3: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –¢–≤–æ—Ä—Ü–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞, —Ä–∞–¥–æ—Å—Ç–∏, —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏—è",
        "—Å–≤–µ—Ç": "–•–∞—Ä–∏–∑–º–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ, —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å",
        "—Ç–µ–Ω—å": "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–µ–æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å",
        "–∑–∞–¥–∞—á–∞": "–†–∞–∑–≤–∏–≤–∞–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –¥–æ–≤–æ–¥–∏ –∏–¥–µ–∏ –¥–æ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏"
    },
    4: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏",
        "—Å–≤–µ—Ç": "–ü—Ä–∞–∫—Ç–∏—á–Ω–æ—Å—Ç—å, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å",
        "—Ç–µ–Ω—å": "–†–∏–≥–∏–¥–Ω–æ—Å—Ç—å, —Å—Ç—Ä–∞—Ö –ø–µ—Ä–µ–º–µ–Ω",
        "–∑–∞–¥–∞—á–∞": "–ù–∞—É—á–∏—Å—å –±—ã—Ç—å –≥–∏–±–∫–æ–π, —Ä–∞–∑—Ä–µ—à–∞–π —Å–µ–±–µ —Å–ø–æ–Ω—Ç–∞–Ω–Ω–æ—Å—Ç—å"
    },
    5: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –ò—Å–∫–∞—Ç–µ–ª—è",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è —Å–≤–æ–±–æ–¥—ã, –ø–µ—Ä–µ–º–µ–Ω, –∂–∞–∂–¥—ã –ø–æ–∑–Ω–∞–Ω–∏—è",
        "—Å–≤–µ—Ç": "–ì–∏–±–∫–æ—Å—Ç—å, –æ–±—â–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        "—Ç–µ–Ω—å": "–ù–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å, –∏–∑–±–µ–≥–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤",
        "–∑–∞–¥–∞—á–∞": "–£—á–∏—Å—å –≤—ã—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ–ø–æ—Ä—ã"
    },
    6: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –ó–∞–±–æ—Ç—ã",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è –ª—é–±–≤–∏, —Å–ª—É–∂–µ–Ω–∏—è, —Å–µ–º—å–∏",
        "—Å–≤–µ—Ç": "–ó–∞–±–æ—Ç–ª–∏–≤–æ—Å—Ç—å, –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç—å",
        "—Ç–µ–Ω—å": "–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å, —Å–ø–∞—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ",
        "–∑–∞–¥–∞—á–∞": "–ë–∞–ª–∞–Ω—Å–∏—Ä—É–π –º–µ–∂–¥—É –∑–∞–±–æ—Ç–æ–π –æ –¥—Ä—É–≥–∏—Ö –∏ —Å–µ–±–µ"
    },
    7: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –ú—É–¥—Ä–µ—Ü–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è –∞–Ω–∞–ª–∏–∑–∞, –∏–Ω—Ç—É–∏—Ü–∏–∏ –∏ —É–µ–¥–∏–Ω–µ–Ω–∏—è",
        "—Å–≤–µ—Ç": "–ì–ª—É–±–∏–Ω–∞, —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ, –∑–Ω–∞–Ω–∏–µ",
        "—Ç–µ–Ω—å": "–ó–∞–º–∫–Ω—É—Ç–æ—Å—Ç—å, –∏–∑–æ–ª—è—Ü–∏—è",
        "–∑–∞–¥–∞—á–∞": "–û—Ç–∫—Ä—ã–≤–∞–π—Å—è –º–∏—Ä—É, –¥–µ–ª–∏—Å—å –º—É–¥—Ä–æ—Å—Ç—å—é"
    },
    8: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –£–ø—Ä–∞–≤–∏—Ç–µ–ª—è",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è –≤–ª–∞—Å—Ç–∏, —É—Å–ø–µ—Ö–∞, –≤–ª–∏—è–Ω–∏—è",
        "—Å–≤–µ—Ç": "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—Å–∫–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
        "—Ç–µ–Ω—å": "–ö–æ–Ω—Ç—Ä–æ–ª—å, –¥–∞–≤–ª–µ–Ω–∏–µ, –∂—ë—Å—Ç–∫–æ—Å—Ç—å",
        "–∑–∞–¥–∞—á–∞": "–£—á–∏—Å—å –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä–æ–∏—Ç—å —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
    },
    9: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –°–ª—É–∂–∏—Ç–µ–ª—è",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è –≥—É–º–∞–Ω–∏–∑–º–∞, —Å–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        "—Å–≤–µ—Ç": "–©–µ–¥—Ä–æ—Å—Ç—å, –∑—Ä–µ–ª–æ—Å—Ç—å, —ç–º–ø–∞—Ç–∏—è",
        "—Ç–µ–Ω—å": "–ñ–µ—Ä—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —É—Å—Ç–∞–ª–æ—Å—Ç—å –æ—Ç –º–∏—Å—Å–∏–∏",
        "–∑–∞–¥–∞—á–∞": "–£–≤–∞–∂–∞–π —Å–≤–æ–∏ –≥—Ä–∞–Ω–∏—Ü—ã, –Ω–µ —Ä–∞—Å—Ç–≤–æ—Ä—è–π—Å—è –≤ –¥—Ä—É–≥–∏—Ö"
    },
    11: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ü—É—Ç—å –ü—Ä–æ—Ä–æ–∫–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–≠–Ω–µ—Ä–≥–∏—è –¥—É—Ö–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞, –ø—Ä–æ–∑—Ä–µ–Ω–∏—è",
        "—Å–≤–µ—Ç": "–ò–Ω—Ç—É–∏—Ü–∏—è, –æ–∑–∞—Ä–µ–Ω–∏–µ, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
        "—Ç–µ–Ω—å": "–†–∞—Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å",
        "–∑–∞–¥–∞—á–∞": "–ó–∞–∑–µ–º–ª—è–π —Å–≤–æ–∏ –∏–¥–µ–∏, –≤–Ω–µ–¥—Ä—è–π –≤ –ø—Ä–∞–∫—Ç–∏–∫—É"
    },
    22: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä –Ω–æ–≤–æ–≥–æ –º–∏—Ä–∞",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ú–∞—Å—à—Ç–∞–±–Ω–æ–µ —Å–æ–∑–∏–¥–∞–Ω–∏–µ, –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏",
        "—Å–≤–µ—Ç": "–ú–∞—Å—Ç–µ—Ä—Å—Ç–≤–æ, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –±–æ–ª—å—à–∏—Ö —Å–∏—Å—Ç–µ–º",
        "—Ç–µ–Ω—å": "–°—Ç—Ä–∞—Ö –ø—Ä–æ–≤–∞–ª–∞, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ",
        "–∑–∞–¥–∞—á–∞": "–î–µ–π—Å—Ç–≤—É–π –ø–æ—à–∞–≥–æ–≤–æ, –¥–æ–≤–µ—Ä—è–π –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ–ø–æ—Ä–µ"
    },
    33: {
        "–Ω–∞–∑–≤–∞–Ω–∏–µ": "–£—á–∏—Ç–µ–ª—å –£—á–∏—Ç–µ–ª–µ–π",
        "–æ–ø–∏—Å–∞–Ω–∏–µ": "–ë–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –ª—é–±–æ–≤—å, —Å–ª—É–∂–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤—É",
        "—Å–≤–µ—Ç": "–°–æ—Å—Ç—Ä–∞–¥–∞–Ω–∏–µ, —Ü–µ–ª–∏—Ç–µ–ª—å—Å—Ç–≤–æ, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
        "—Ç–µ–Ω—å": "–°–ø–∞—Å–∞—Ç–µ–ª—å—Å—Ç–≤–æ, —Å–∞–º–æ–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏–µ, –≤—ã–≥–æ—Ä–∞–Ω–∏–µ",
        "–∑–∞–¥–∞—á–∞": "–°–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç–Ω–µ—Ä–≥–∏—é"
    }
}

def reduce_number(n):
    while n not in [11, 22, 33] and n > 9:
        n = sum(int(d) for d in str(n))
    return n

def calculate_all(day, month, year):
    d = sum(int(i) for i in str(day))
    m = sum(int(i) for i in str(month))
    y = sum(int(i) for i in str(year))

    soul = reduce_number(day)
    karma = reduce_number(day + month)
    path = reduce_number(day + month + year)
    gift = reduce_number(day + year)
    body = reduce_number(month)
    year_code = reduce_number(year)

    gates = reduce_number(abs(soul - karma))
    abundance = reduce_number(gift + body)
    memory = reduce_number(year_code + karma)
    realization = reduce_number(path + gift)
    love = reduce_number(karma + body)
    spirit = reduce_number(path + year_code)

    result = {
        "–ü—É—Ç—å –î—É—à–∏": path,
        "–ß–∏—Å–ª–æ –î—É—à–∏": soul,
        "–ö–∞—Ä–º–∞": karma,
        "–î–∞—Ä": gift,
        "–¢–µ–ª–æ": body,
        "–≠–Ω–µ—Ä–≥–∏—è –≥–æ–¥–∞": year_code,
        "–í—Ä–∞—Ç–∞ –î—É—à–∏": gates,
        "–ò–∑–æ–±–∏–ª–∏–µ": abundance,
        "–ò–Ω–∫–∞—Ä–Ω–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å": memory,
        "–†–µ–∞–ª–∏–∑–∞—Ü–∏—è": realization,
        "–õ—é–±–æ–≤—å": love,
        "–î—É—Ö": spirit
    }
    return result

def find_connections(results):
    connections = []
    values = list(results.items())
    for i in range(len(values)):
        for j in range(i + 1, len(values)):
            if values[i][1] == values[j][1]:
                connections.append(f"{values[i][0]} ‚Üî {values[j][0]} ‚Äî –∫–ª—é—á–µ–≤–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {ARCHETYPES.get(values[i][1], {}).get('–Ω–∞–∑–≤–∞–Ω–∏–µ', '')}")
    return connections

st.set_page_config(page_title="–ß–∏—Å–ª–∞ –°—É–¥—å–±—ã", page_icon="üî¢")
st.title("üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ß–∏—Å–µ–ª –°—É–¥—å–±—ã")

col1, col2, col3 = st.columns(3)
with col1:
    day = st.number_input("–î–µ–Ω—å", 1, 31, 1)
with col2:
    month = st.number_input("–ú–µ—Å—è—Ü", 1, 12, 1)
with col3:
    year = st.number_input("–ì–æ–¥", 1900, 2100, 1984)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    result = calculate_all(day, month, year)
    all_numbers = list(result.values())
    counter = Counter(all_numbers)
    master_energies = [n for n in all_numbers if n in [11, 22, 33]]

    for name, value in result.items():
        archetype = ARCHETYPES.get(value)
        if archetype:
            st.markdown(f"### {name}: {value} ‚Äî {archetype['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")
            st.markdown(f"**–°—É—Ç—å:** {archetype['–æ–ø–∏—Å–∞–Ω–∏–µ']}")
            st.markdown(f"**–°–≤–µ—Ç:** {archetype['—Å–≤–µ—Ç']}")
            st.markdown(f"**–¢–µ–Ω—å:** {archetype['—Ç–µ–Ω—å']}")
            st.markdown(f"**–ó–∞–¥–∞—á–∞:** {archetype['–∑–∞–¥–∞—á–∞']}")
        else:
            st.markdown(f"### {name}: {value}")

    st.markdown("---")
    st.subheader("üåü –û–±–æ–±—â–µ–Ω–∏–µ & –∫–ª—é—á–µ–≤—ã–µ —ç–Ω–µ—Ä–≥–∏–∏")
    keyword_map = {
        1: "—Å–∞–º–æ—Å—Ç—å, –ª–∏–¥–µ—Ä—Å—Ç–≤–æ, –¥–µ–π—Å—Ç–≤–∏–µ",
        2: "–ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–æ, –±–∞–ª–∞–Ω—Å",
        3: "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ä–∞–¥–æ—Å—Ç—å",
        4: "—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
        5: "—Å–≤–æ–±–æ–¥–∞, –ø–µ—Ä–µ–º–µ–Ω—ã",
        6: "–∑–∞–±–æ—Ç–∞, —Å–µ–º—å—è",
        7: "–∏–Ω—Ç—É–∏—Ü–∏—è, –º—É–¥—Ä–æ—Å—Ç—å",
        8: "–≤–ª–∞—Å—Ç—å, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π —É—Å–ø–µ—Ö",
        9: "—Å–ª—É–∂–µ–Ω–∏–µ, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ",
        11: "–∏–Ω—Ç—É–∏—Ü–∏—è, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ (–º–∞—Å—Ç–µ—Ä)",
        22: "–º–∞—Å—à—Ç–∞–±–Ω–æ–µ —Å–æ–∑–∏–¥–∞–Ω–∏–µ (–º–∞—Å—Ç–µ—Ä)",
        33: "–±–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –ª—é–±–æ–≤—å (–º–∞—Å—Ç–µ—Ä)"
    }

    for number, count in counter.items():
        if count > 1:
            keywords = keyword_map.get(number, ARCHETYPES.get(number, {}).get('–æ–ø–∏—Å–∞–Ω–∏–µ', ''))
            st.markdown(f"üîÅ **–ß–∏—Å–ª–æ {number}** –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è **{count} —Ä–∞–∑(–∞)** ‚Äî {keywords}")

    if master_energies:
        st.markdown("**üíé –ú–∞—Å—Ç–µ—Ä-—ç–Ω–µ—Ä–≥–∏–∏:**")
        for m in master_energies:
            st.markdown(f"‚Ä¢ {m} ‚Äî {ARCHETYPES[m]['–Ω–∞–∑–≤–∞–Ω–∏–µ']}")

    # –û—Å–æ–±–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –ö–∞—Ä–º–∞ vs –ü—É—Ç—å
    if result.get("–ö–∞—Ä–º–∞") == 33 and result.get("–ü—É—Ç—å –î—É—à–∏") == 1:
        st.warning("‚öñÔ∏è –ö–∞—Ä–º–∞ (33) –∏ –ü—É—Ç—å (1) —Ç—è–Ω—É—Ç –≤ —Ä–∞–∑–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã: —Å–ª—É–∂–µ–Ω–∏–µ ‚Üî —Å–∞–º–æ—Å—Ç—å. –ù–∞–π–¥–∏ –±–∞–ª–∞–Ω—Å.")

    st.markdown("---")
    st.subheader("üîó –°–≤—è–∑–∏ –º–µ–∂–¥—É –ø–æ–∑–∏—Ü–∏—è–º–∏")
    for link in find_connections(result):
        st.markdown(f"- {link}")
